## WRITTEN BY Raj Wagh and Oliver ChanSchatz

# This code displays a list of questions based on the category

# List of questions
questions = {
    # Question's class: Waste
    1: "Waste generated - Hazardous [metric ton]",
    2: "Waste generated - Non Hazardous [metric ton]",
    3: "Diverted Waste from Disposal (reused, recycled, recovered) [metric ton]",

    # Question's class: Water
    4: "Water withdrawal [m3]",
    5: "Total FRESH water discharge (<= 1,000mg/L TDS) [m3]",
    6: "Total OTHER water discharge (>= 1,000mg/L TDS) [m3]",
    7: "Water Recycled or Reused [m3]",

    # Question's class: Procurement - Production & Packaging
    8: "Non-renewabe materials used [metric ton]",
    9: "Non-renewable packaging material used [metric ton]",
    10: "Renewable material used [metric ton]",
    11: "Renewable packaging material used [metric ton]",
    12: "Recycled input material used [metric ton]",
    13: "Recycled packaging material used [metric ton]",
    14: "Reusable, compostable or recyclable material [%]",
    15: "Reusable, compostable or recyclable material [%]",
    16: "Paper consumption [metric ton]",
    17: "Single-use plastic consumption [metric ton]",

    # Question's class: Energy
    18: "Total energy generated by the company [MWh]",
    19: "Total non fossil fuel energy generated by the company [MWh]",
    20: "Total energy consumed [MWh]",
    21: "Renewable energy consumed [MWh]",
    22: "Certified buildings and facilities i.e. LEED [%]",
    
    # Question's class: GHG emission
    23: "Total direct GHG emissions [tCO2e]",
    24: "Total energy indirect GHG emissions [tCO2e]",
    25: "Total use of products [metric tons CO2 equilvalent tCO2e]",
    26: "Average specific CO2 emissions [gCO2/km]",
    27: "Emissions neutralized by Carbon Offset Projects [tCO2e]",
    28: "Emissions of ozone-depleting substances (ODS) [metric tons of CFC-11]",
    29: "Nitrogen oxides [NOX], sulfur oxides [SOX] and other significant air emissions [tons NOx + Sox]",    
    
    # Question's class: Spillage & Discharges
    30: "Spillage and fines [$]",
    31: "Volume of flared hydrocarbon [tCO2e]",
    32: "Volume of vented hydrocarbon [tCO2e]",

    # Question's class: Durability
    33: "Packaging material to be reclaimed/recovered [%]",
    34: "Material to be reclaimed [%]",
    35: "Average lifespan of product or warranty provided [years]"
}

# List of categories
categories = {
    "Energy&Utilities" : [1,2,3,4,5,6,7,18,19,23,24,25,27,28,29,30,31,32],
    "Manufacturing" : [1,2,3,4,5,6,7,9,11,13,15,20,21,23,24,25,27,28,29,30,33],
    "Automotive" : [1,2,3,4,5,6,7,8,10,12,14,20,21,23,24,25,26,27,28,29,30,34,35],
    "Services" : [1,2,3,4,5,6,7,8,10,12,16,17,20,21,22,23,24,25,27,28,29,30]
}


def compute_indices(data, category="Energy&Utilities"):
    """Calculate circularity indices based on formulas"""
    # Extract relevant data using question keys
    values = {}
    category_questions = categories.get(category, [])

    if len(category_questions) == 0:
        raise ValueError("Invalid category provided for compute_indices()")

    for q_id in category_questions:
        if data.get(str(q_id), 0) != '':
            values[q_id] = float(data.get(str(q_id), 0))
        else:
            values[q_id] = 0
            
    if category == "Energy&Utilities":
        # Energy data
        E8 = values.get(18, 1)  # Total Energy generated by the company
        F8 = values.get(19, 0)  # Total Non Fossil Fuel Energy generated by the company

        # GHG Emissions data
        H8 = values.get(23, 0)  # Total Direct GHG emissions
        I8 = values.get(24, 0)  # Total Energy indirect GHG emissions
        J8 = values.get(27, 0)  # Emissions Neutralized by Carbon Offset Projects
        K8 = values.get(28, 0)  # Emissions of ozone-depleting substances
        L8 = values.get(29, 0)  # Nitrogen oxides and sulfur oxides

        # Water data
        N8 = values.get(4, 1)   # Water withdrawal
        Q8 = values.get(7, 0)   # Water Recycled or Reused
        O8 = values.get(5, 0)   # Total FRESH water discharge
        P8 = values.get(6, 0)   # Total OTHER water discharge

        # Waste data
        R8 = values.get(2, 0)   # Waste generated - Non Hazardous
        T8 = values.get(3, 0)   # Diverted Waste from Disposal
        U8 = values.get(30, 0)  # Spillage and fines

        # Emission calculations
        D24 = (H8 + I8 - J8) * 10**3 / E8 if E8 else 0
        E24 = K8 / E8 if E8 else 0
        F24 = L8 * 10**3 / E8 if E8 else 0
        O24 = U8 * 10**2 / E8 if E8 else 0

        # Normalize emissions data
        O42 = 1 - (D24 / 600) if D24 else 0
        P42 = 1 - (E24 / 0.1) if E24 else 0
        Q42 = 1 - (F24 / 1.00) if F24 else 0
        R42 = 1 - (O24 / 1.00) if O24 else 0

        # Emissions index
        index_emissions = (O42 * 0.5 + P42 * 0.2 + Q42 * 0.2 + R42 * 0.1) if (O42 or P42 or Q42 or R42) else 0

        # Energy index
        index_energy = F8 / E8 if E8 else 0

        # Water index
        H42 = Q8 / N8 if (N8 and Q8) else 0
        I42 = 1 - (P8 / (O8 + P8)) if (O8 + P8) else 0
        J42 = 1 - (H8 / N8) if N8 else 0
        index_water = (H42 * (1/3) + I42 * (1/3) + J42 * (1/3)) if N8 else 0

        # Waste index
        total_waste = R8 + data.get("Waste", 1)
        D42 = 1 - (R8 / total_waste) if total_waste else 0
        E42 = T8 / total_waste if total_waste else 0
        index_waste = (D42 * 0.5 + E42 * 0.5) if (D42 or E42) else 0

        return {
            "index_energy": round(index_energy, 2),
            "index_water": round(index_water, 2),
            "index_emissions": round(index_emissions, 2),
            "index_waste": round(index_waste, 2),
        }
    
    elif category == "Manufacturing":
        # --- Manufacturing formulas from Manufacturing formulas.txt ---
        # Energy Index
        E = values.get(20, 0)   # Total energy consumed [MWh]
        G = values.get(21, 0)   # Renewable energy consumed [MWh]
        C = G / E if E else 0
        D = (E - G) / E if E else 0
        index_energy = (C * (3/4) + D * (1/4)) / ((3/4) + (1/4))

        # Water Index
        O6 = values.get(4, 0)   # Water withdrawal
        R6 = values.get(7, 0)   # Water Recycled or Reused
        P6 = values.get(5, 0)   # Total FRESH water discharge
        Q6 = values.get(6, 0)   # Total OTHER water discharge
        Z6 = values.get(13, 0)  # Recycled packaging material used
        X6 = values.get(9, 0)   # Non-renewable packaging material used
        Y6 = values.get(11, 0)  # Renewable packaging material used
        # Sub-components
        J24 = R6 / O6 if O6 else 0
        M24 = Q6 / (P6 + Q6) if (P6 + Q6) else 0
        L24 = O6 - (P6 + Q6)
        N24 = L24 / O6 if O6 else 0
        # D6 (denominator) should be replaced by actual plastic-binary or durability measure
        D6 = values.get(33, 1)
        O24 = O6 / D6 if D6 else 0
        V24 = Z6
        W24 = Y6 / (X6 + Y6) if (X6 + Y6) else 0
        # Scores
        J44 = J24
        K44 = 1 - M24
        L44 = 1 - N24
        # threshold = 2000 (from $M$55)
        M44 = 1 - min(O24 / 2000, 1)
        N44 = V24
        O44 = W24
        P44 = 0  # placeholder if additional metric
        # Group weights
        w1 = (J44 + K44 + L44 + M44) / 4
        w2 = (N44 + O44 + P44) / 3
        index_water = (w1 + w2) / 2

        # Emission Index
        I6 = values.get(23, 0)
        J6 = values.get(24, 0)
        K6 = values.get(27, 0)
        L6 = values.get(28, 0)
        M6 = values.get(29, 0)
        V6 = values.get(30, 0)
        # Sub-components
        H24 = (I6 + J6 - K6) * 1e3 / D6 if D6 else 0
        I24 = L6 * 1e6 / D6 if D6 else 0
        J24_em = M6 * 1e3 / D6 if D6 else 0
        U24 = V6 * 1e2 / D6 if D6 else 0
        # Thresholds
        W44 = 1 - min(H24 / 7000, 1)
        X44 = 1 - min(I24 / 0.1, 1)
        Y44 = 1 - min(J24_em / 1, 1)
        Z44 = 1 - min(U24 / 10, 1)
        # Weights
        total_w = (1/2)+(1/5)+(1/5)+(1/10)
        index_emissions = (W44 * (1/2) + X44 * (1/5) + Y44 * (1/5) + Z44 * (1/10)) / total_w

        # Waste Index
        S6 = values.get(1, 0)
        T6 = values.get(2, 0)
        U6 = values.get(3, 0)
        P24 = S6 + T6
        R24 = S6 / P24 if P24 else 0
        S24 = U6 / P24 if P24 else 0
        T24 = (P24 * 1e3) / D6 if D6 else 0
        D44 = 1 - R24
        E44 = S24
        F44 = 1 - min(T24 / 200, 1)
        index_waste = (D44 * (1/3) + E44 * (1/3) + F44 * (1/3)) / 1

        return {
            "index_energy": round(index_energy, 2),
            "index_water": round(index_water, 2),
            "index_emissions": round(index_emissions, 2),
            "index_waste": round(index_waste, 2)
        }
    
    else:
        raise ValueError(f"Unknown category: {category}")
